%{

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "avl.h"

char* author = "Tim Nicholson";
char* filename = "graph.dot"; 
FILE *fp;
AVL avl;
AUTS authorsLine; 

void showAutores(AUTS authorsLine);
AUTS addAutLine(AUTS authorsLine, char *author);
void printAuthors(AUTS a);
void createGraph();
void printNodes(AVL avl);
void printGraph(AVL avl);
void printAVL();

%}

%x OUTAUT

%%
	
				avl = NULL; int *cresceu = malloc(sizeof(int)); avl = insert(avl, author, cresceu); 
^[A-Za-z .]*" -> "		{authorsLine = NULL; char *at = strdup(yytext - 4); authorsLine = addAutLine(authorsLine, at); BEGIN OUTAUT;}
^[A-Za-z .]*\n			{authorsLine = NULL; char *at = strdup(yytext - 1); authorsLine = addAutLine(authorsLine, at); avl = addAuthors(avl, author, authorsLine); showAutores(authorsLine);}
<OUTAUT>[A-Za-z .]*" -> "	{char *at = strdup(yytext - 4); authorsLine = addAutLine(authorsLine, at);}
<OUTAUT>[A-Za-z .]*\n		{char *at = strdup(yytext - 1); authorsLine = addAutLine(authorsLine, at); avl = addAuthors(avl, author, authorsLine); showAutores(authorsLine); BEGIN INITIAL;}
<*><<EOF>>			{fp = fopen(filename, "w"); printAVL(); if(fp) fclose(fp); free(authorsLine); free(avl); return 0;}

%%

void showAutores(AUTS authorsLine) {
	FILE *file = fopen("file.txt", "w");
	if(authorsLine != NULL) {
		fprintf(file, "%s -> ", authorsLine->author);
		showAutores(authorsLine->next);
	} 
	fprintf(file, "\n");
	fclose(file);
}

AUTS addAutLine(AUTS authorsLine, char *author) {
	if(authorsLine == NULL) {
		authorsLine = (AUTS) malloc(sizeof(struct authors_line));
		authorsLine->author = malloc(100 * sizeof(char));
		strcpy(authorsLine->author, author);
		authorsLine->next = NULL;
	}
	else {
		AUTS aux = authorsLine->next;
		authorsLine->next = addAutLine(aux, author);
	}
	return authorsLine;
}

void printNodes(AVL avl) {
	if(avl != NULL) {
		fprintf(fp, "node [shape = circle];");
		fprintf(fp, " \"%s\" ", avl->author);
		printNodes(avl->left);
		printNodes(avl->right);
	}
}

void printGraph(AVL avl) {
	if(avl != NULL) {
		if(strncmp(author, avl->author, strlen(author)) == 0) fprintf(fp, "\n\"%s\"", author);
		else fprintf(fp, " -> \"%s\" [label = \"%d\"];", avl->author, avl->num);
		printGraph(avl->right);
		printGraph(avl->left);
	}
}

void printAVL() {
	fprintf(fp, "digraph finite_state_machine {\n");
	fprintf(fp, "	rankdir=LR;\n");
	fprintf(fp, "	size=\"20,20\"\n");
	printNodes(avl);
	printGraph(avl);
	fprintf(fp, "\n}");
}
