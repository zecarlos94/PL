%{

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "avl.h"

char* author = "Tim Nicholson";
char* filename = "graph.dot"; 
FILE *fp;
AVL avl;

AUTS addAutLine(AUTS a, char *author);
void printAuthors(AUTS a);
void createGraph();
void printNodes(AVL avl);
void printGraph(AVL avl);
void printAVL();

%}

%x AUTOR

%%

					avl = NULL; int *cresceu = malloc(sizeof(int)); avl = insert(avl, author, cresceu); AUTS authorsLine; 
author[ ]*\=[ ]*[{"]			{authorsLine = NULL; BEGIN AUTOR;}
<AUTOR>[ ]*\n?[ ]*and[ ]*\n?[ ]*	{}
<AUTOR>([A-Z]\.?[a-z][ ]?)*		{addAutLine(authorsLine, yytext);}
<AUTOR>[ ]*["}]\,			{printAuthors(authorsLine); addAuthors(avl, author, authorsLine); BEGIN INITIAL;}
.|\n					{}
<*><<EOF>>				{fp = fopen(filename, "w"); printAVL(); if(fp) {createGraph(); fclose(fp);} free(authorsLine); free(avl); return 0;}

%%

AUTS addAutLine(AUTS a, char *author) {
	if(a == NULL) {
		a = (AUTS) malloc(sizeof(struct authors_line));
		a->author = malloc(100 * sizeof(char));
		strcpy(a->author, author);
		a->next = NULL;
	}
	else a->next = addAutLine(a->next, author);
	return a;
}

void printAuthors(AUTS a) {
	if(a != NULL) {
		printf("%s -> ", a->author);
		printAuthors(a->next);
	}
	printf("\n");
} 

void createGraph() {
	char comando[300];
	sprintf(comando, "dot -Tpng %s > fig.png", filename);
	system(comando);
}

void printNodes(AVL avl) {
	if(avl != NULL) {
		fprintf(fp, "node [shape = circle];");
		fprintf(fp, " \"%s\" ", avl->author);
		printNodes(avl->left);
		printNodes(avl->right);
	}
}

void printGraph(AVL avl) {
	if(avl != NULL) {
		if(strncmp(author, avl->author, strlen(author)) == 0) fprintf(fp, "\n\"%s\"", author);
		else fprintf(fp, " -> \"%s\" [label = \"%d\"];", avl->author, avl->num);
		printGraph(avl->right);
		printGraph(avl->left);
	}
}

void printAVL() {
	fprintf(fp, "digraph finite_state_machine {\n");
	fprintf(fp, "	rankdir=LR;\n");
	fprintf(fp, "	size=\"20,20\"\n");
	printNodes(avl);
	printGraph(avl);
	fprintf(fp, "\n}");
}

/**int main(int argc, char* argv[]) {
	avl = NULL;
	int *cresceu = malloc(sizeof(int)); 
	avl = insert(avl, author, cresceu);
	// yyin = fopen("lp.bib", "r");
	yylex();
	return 0; 
}*/
